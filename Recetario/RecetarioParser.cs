//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\oscar\Desktop\Nueva carpeta\Recetario.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class RecetarioParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		GUION=1, RECETA=2, PORCIONES=3, PREPARACION=4, COCCION=5, CALORIAS=6, 
		INGREDIENTES=7, ELABORACION=8, CUCHARADITA=9, CUCHARADA=10, TAZA=11, SEP=12, 
		SP=13, NUMBER=14, TEXT=15, WORD=16, ING_ITEM_SP=17, PASOS_SP=18, WS=19;
	public const int
		RULE_recetario = 0, RULE_receta = 1, RULE_nombre = 2, RULE_porciones = 3, 
		RULE_preparacion = 4, RULE_coccion = 5, RULE_calorias = 6, RULE_ingredientes = 7, 
		RULE_elaboracion = 8, RULE_ing_item = 9, RULE_ela_item = 10;
	public static readonly string[] ruleNames = {
		"recetario", "receta", "nombre", "porciones", "preparacion", "coccion", 
		"calorias", "ingredientes", "elaboracion", "ing_item", "ela_item"
	};

	private static readonly string[] _LiteralNames = {
		null, "'- '", "'RECETA'", "'PORCIONES'", "'TIEMPO PREPARACION'", "'TIEMPO COCCION'", 
		"'CALORIAS'", "'INGREDIENTES'", "'ELABORACION'", null, null, null, null, 
		null, null, null, null, "','", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "GUION", "RECETA", "PORCIONES", "PREPARACION", "COCCION", "CALORIAS", 
		"INGREDIENTES", "ELABORACION", "CUCHARADITA", "CUCHARADA", "TAZA", "SEP", 
		"SP", "NUMBER", "TEXT", "WORD", "ING_ITEM_SP", "PASOS_SP", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Recetario.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static RecetarioParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RecetarioParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RecetarioParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RecetarioContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RecetarioParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RecetaContext[] receta() {
			return GetRuleContexts<RecetaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecetaContext receta(int i) {
			return GetRuleContext<RecetaContext>(i);
		}
		public RecetarioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recetario; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecetarioVisitor<TResult> typedVisitor = visitor as IRecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecetario(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecetarioContext recetario() {
		RecetarioContext _localctx = new RecetarioContext(Context, State);
		EnterRule(_localctx, 0, RULE_recetario);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 22;
				receta();
				}
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==GUION );
			State = 27;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecetaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NombreContext nombre() {
			return GetRuleContext<NombreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PorcionesContext porciones() {
			return GetRuleContext<PorcionesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreparacionContext preparacion() {
			return GetRuleContext<PreparacionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CoccionContext coccion() {
			return GetRuleContext<CoccionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaloriasContext calorias() {
			return GetRuleContext<CaloriasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IngredientesContext ingredientes() {
			return GetRuleContext<IngredientesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElaboracionContext elaboracion() {
			return GetRuleContext<ElaboracionContext>(0);
		}
		public RecetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receta; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecetarioVisitor<TResult> typedVisitor = visitor as IRecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReceta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecetaContext receta() {
		RecetaContext _localctx = new RecetaContext(Context, State);
		EnterRule(_localctx, 2, RULE_receta);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			nombre();
			State = 30;
			porciones();
			State = 32;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 31;
				preparacion();
				}
				break;
			}
			State = 35;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 34;
				coccion();
				}
				break;
			}
			State = 38;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 37;
				calorias();
				}
				break;
			}
			State = 41;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 40;
				ingredientes();
				}
				break;
			}
			State = 44;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 43;
				elaboracion();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NombreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(RecetarioParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECETA() { return GetToken(RecetarioParser.RECETA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(RecetarioParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(RecetarioParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(RecetarioParser.SP, 0); }
		public NombreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nombre; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecetarioVisitor<TResult> typedVisitor = visitor as IRecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNombre(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NombreContext nombre() {
		NombreContext _localctx = new NombreContext(Context, State);
		EnterRule(_localctx, 4, RULE_nombre);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			Match(GUION);
			State = 47;
			Match(RECETA);
			State = 48;
			Match(SEP);
			State = 49;
			Match(TEXT);
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 50;
				Match(SP);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PorcionesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(RecetarioParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORCIONES() { return GetToken(RecetarioParser.PORCIONES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(RecetarioParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RecetarioParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(RecetarioParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(RecetarioParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(RecetarioParser.TEXT, 0); }
		public PorcionesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_porciones; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecetarioVisitor<TResult> typedVisitor = visitor as IRecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPorciones(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PorcionesContext porciones() {
		PorcionesContext _localctx = new PorcionesContext(Context, State);
		EnterRule(_localctx, 6, RULE_porciones);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			Match(GUION);
			State = 54;
			Match(PORCIONES);
			State = 55;
			Match(SEP);
			State = 56;
			Match(NUMBER);
			State = 57;
			Match(SP);
			State = 58;
			Match(TEXT);
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 59;
				Match(SP);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreparacionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(RecetarioParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARACION() { return GetToken(RecetarioParser.PREPARACION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(RecetarioParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RecetarioParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(RecetarioParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(RecetarioParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(RecetarioParser.TEXT, 0); }
		public PreparacionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preparacion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecetarioVisitor<TResult> typedVisitor = visitor as IRecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreparacion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreparacionContext preparacion() {
		PreparacionContext _localctx = new PreparacionContext(Context, State);
		EnterRule(_localctx, 8, RULE_preparacion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(GUION);
			State = 63;
			Match(PREPARACION);
			State = 64;
			Match(SEP);
			State = 65;
			Match(NUMBER);
			State = 66;
			Match(SP);
			State = 67;
			Match(TEXT);
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 68;
				Match(SP);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoccionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(RecetarioParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COCCION() { return GetToken(RecetarioParser.COCCION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(RecetarioParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RecetarioParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(RecetarioParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(RecetarioParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(RecetarioParser.TEXT, 0); }
		public CoccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coccion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecetarioVisitor<TResult> typedVisitor = visitor as IRecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoccion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CoccionContext coccion() {
		CoccionContext _localctx = new CoccionContext(Context, State);
		EnterRule(_localctx, 10, RULE_coccion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(GUION);
			State = 72;
			Match(COCCION);
			State = 73;
			Match(SEP);
			State = 74;
			Match(NUMBER);
			State = 75;
			Match(SP);
			State = 76;
			Match(TEXT);
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 77;
				Match(SP);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaloriasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(RecetarioParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALORIAS() { return GetToken(RecetarioParser.CALORIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(RecetarioParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RecetarioParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(RecetarioParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(RecetarioParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(RecetarioParser.TEXT, 0); }
		public CaloriasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calorias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecetarioVisitor<TResult> typedVisitor = visitor as IRecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalorias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaloriasContext calorias() {
		CaloriasContext _localctx = new CaloriasContext(Context, State);
		EnterRule(_localctx, 12, RULE_calorias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(GUION);
			State = 81;
			Match(CALORIAS);
			State = 82;
			Match(SEP);
			State = 83;
			Match(NUMBER);
			State = 84;
			Match(SP);
			State = 85;
			Match(TEXT);
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 86;
				Match(SP);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IngredientesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(RecetarioParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INGREDIENTES() { return GetToken(RecetarioParser.INGREDIENTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(RecetarioParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ing_itemContext[] ing_item() {
			return GetRuleContexts<Ing_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ing_itemContext ing_item(int i) {
			return GetRuleContext<Ing_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(RecetarioParser.SP, 0); }
		public IngredientesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ingredientes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecetarioVisitor<TResult> typedVisitor = visitor as IRecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIngredientes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IngredientesContext ingredientes() {
		IngredientesContext _localctx = new IngredientesContext(Context, State);
		EnterRule(_localctx, 14, RULE_ingredientes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(GUION);
			State = 90;
			Match(INGREDIENTES);
			State = 91;
			Match(SEP);
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 92;
				ing_item();
				}
				}
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NUMBER );
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 97;
				Match(SP);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElaboracionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(RecetarioParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELABORACION() { return GetToken(RecetarioParser.ELABORACION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(RecetarioParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ela_itemContext[] ela_item() {
			return GetRuleContexts<Ela_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ela_itemContext ela_item(int i) {
			return GetRuleContext<Ela_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(RecetarioParser.SP, 0); }
		public ElaboracionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elaboracion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecetarioVisitor<TResult> typedVisitor = visitor as IRecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElaboracion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElaboracionContext elaboracion() {
		ElaboracionContext _localctx = new ElaboracionContext(Context, State);
		EnterRule(_localctx, 16, RULE_elaboracion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(GUION);
			State = 101;
			Match(ELABORACION);
			State = 102;
			Match(SEP);
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 103;
				ela_item();
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NUMBER );
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 108;
				Match(SP);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ing_itemContext : ParserRuleContext {
		public IToken unit;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RecetarioParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(RecetarioParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(RecetarioParser.SP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ING_ITEM_SP() { return GetToken(RecetarioParser.ING_ITEM_SP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUCHARADITA() { return GetToken(RecetarioParser.CUCHARADITA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUCHARADA() { return GetToken(RecetarioParser.CUCHARADA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAZA() { return GetToken(RecetarioParser.TAZA, 0); }
		public Ing_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ing_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecetarioVisitor<TResult> typedVisitor = visitor as IRecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIng_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ing_itemContext ing_item() {
		Ing_itemContext _localctx = new Ing_itemContext(Context, State);
		EnterRule(_localctx, 18, RULE_ing_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(NUMBER);
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CUCHARADITA) | (1L << CUCHARADA) | (1L << TAZA))) != 0)) {
				{
				State = 112;
				_localctx.unit = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CUCHARADITA) | (1L << CUCHARADA) | (1L << TAZA))) != 0)) ) {
					_localctx.unit = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 115;
				Match(SP);
				}
			}

			State = 118;
			Match(TEXT);
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ING_ITEM_SP) {
				{
				State = 119;
				Match(ING_ITEM_SP);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ela_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RecetarioParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASOS_SP() { return GetToken(RecetarioParser.PASOS_SP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(RecetarioParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(RecetarioParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(RecetarioParser.SP, i);
		}
		public Ela_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ela_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecetarioVisitor<TResult> typedVisitor = visitor as IRecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEla_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ela_itemContext ela_item() {
		Ela_itemContext _localctx = new Ela_itemContext(Context, State);
		EnterRule(_localctx, 20, RULE_ela_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(NUMBER);
			State = 123;
			Match(PASOS_SP);
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 124;
				Match(SP);
				}
			}

			State = 127;
			Match(TEXT);
			State = 129;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 128;
				Match(SP);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x15', '\x86', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x3', '\x2', '\x6', '\x2', '\x1A', '\n', '\x2', 
		'\r', '\x2', '\xE', '\x2', '\x1B', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '#', '\n', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '&', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', ')', 
		'\n', '\x3', '\x3', '\x3', '\x5', '\x3', ',', '\n', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '/', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x36', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '?', '\n', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', 'H', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'Q', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'Z', '\n', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x6', '\t', '`', '\n', '\t', '\r', 
		'\t', '\xE', '\t', '\x61', '\x3', '\t', '\x5', '\t', '\x65', '\n', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x6', '\n', 'k', 
		'\n', '\n', '\r', '\n', '\xE', '\n', 'l', '\x3', '\n', '\x5', '\n', 'p', 
		'\n', '\n', '\x3', '\v', '\x3', '\v', '\x5', '\v', 't', '\n', '\v', '\x3', 
		'\v', '\x5', '\v', 'w', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'{', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x80', 
		'\n', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x84', '\n', '\f', 
		'\x3', '\f', '\x2', '\x2', '\r', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x2', '\x3', '\x3', '\x2', '\v', 
		'\r', '\x2', '\x8E', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x6', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x37', '\x3', '\x2', '\x2', '\x2', '\n', '@', '\x3', '\x2', 
		'\x2', '\x2', '\f', 'I', '\x3', '\x2', '\x2', '\x2', '\xE', 'R', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '[', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x66', '\x3', '\x2', '\x2', '\x2', '\x14', 'q', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '|', '\x3', '\x2', '\x2', '\x2', '\x18', '\x1A', '\x5', 
		'\x4', '\x3', '\x2', '\x19', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x1E', '\a', '\x2', '\x2', '\x3', '\x1E', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x5', '\x6', '\x4', '\x2', 
		' ', '\"', '\x5', '\b', '\x5', '\x2', '!', '#', '\x5', '\n', '\x6', '\x2', 
		'\"', '!', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\x3', '\x2', '\x2', 
		'\x2', '#', '%', '\x3', '\x2', '\x2', '\x2', '$', '&', '\x5', '\f', '\a', 
		'\x2', '%', '$', '\x3', '\x2', '\x2', '\x2', '%', '&', '\x3', '\x2', '\x2', 
		'\x2', '&', '(', '\x3', '\x2', '\x2', '\x2', '\'', ')', '\x5', '\xE', 
		'\b', '\x2', '(', '\'', '\x3', '\x2', '\x2', '\x2', '(', ')', '\x3', '\x2', 
		'\x2', '\x2', ')', '+', '\x3', '\x2', '\x2', '\x2', '*', ',', '\x5', '\x10', 
		'\t', '\x2', '+', '*', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', 
		'\x2', '\x2', ',', '.', '\x3', '\x2', '\x2', '\x2', '-', '/', '\x5', '\x12', 
		'\n', '\x2', '.', '-', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', 
		'\x2', '\x2', '/', '\x5', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', 
		'\a', '\x3', '\x2', '\x2', '\x31', '\x32', '\a', '\x4', '\x2', '\x2', 
		'\x32', '\x33', '\a', '\xE', '\x2', '\x2', '\x33', '\x35', '\a', '\x11', 
		'\x2', '\x2', '\x34', '\x36', '\a', '\xF', '\x2', '\x2', '\x35', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\a', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\a', '\x3', 
		'\x2', '\x2', '\x38', '\x39', '\a', '\x5', '\x2', '\x2', '\x39', ':', 
		'\a', '\xE', '\x2', '\x2', ':', ';', '\a', '\x10', '\x2', '\x2', ';', 
		'<', '\a', '\xF', '\x2', '\x2', '<', '>', '\a', '\x11', '\x2', '\x2', 
		'=', '?', '\a', '\xF', '\x2', '\x2', '>', '=', '\x3', '\x2', '\x2', '\x2', 
		'>', '?', '\x3', '\x2', '\x2', '\x2', '?', '\t', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x41', '\a', '\x3', '\x2', '\x2', '\x41', '\x42', '\a', '\x6', 
		'\x2', '\x2', '\x42', '\x43', '\a', '\xE', '\x2', '\x2', '\x43', '\x44', 
		'\a', '\x10', '\x2', '\x2', '\x44', '\x45', '\a', '\xF', '\x2', '\x2', 
		'\x45', 'G', '\a', '\x11', '\x2', '\x2', '\x46', 'H', '\a', '\xF', '\x2', 
		'\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\v', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\a', '\x3', 
		'\x2', '\x2', 'J', 'K', '\a', '\a', '\x2', '\x2', 'K', 'L', '\a', '\xE', 
		'\x2', '\x2', 'L', 'M', '\a', '\x10', '\x2', '\x2', 'M', 'N', '\a', '\xF', 
		'\x2', '\x2', 'N', 'P', '\a', '\x11', '\x2', '\x2', 'O', 'Q', '\a', '\xF', 
		'\x2', '\x2', 'P', 'O', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x3', '\x2', 
		'\x2', '\x2', 'Q', '\r', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '\x3', 
		'\x2', '\x2', 'S', 'T', '\a', '\b', '\x2', '\x2', 'T', 'U', '\a', '\xE', 
		'\x2', '\x2', 'U', 'V', '\a', '\x10', '\x2', '\x2', 'V', 'W', '\a', '\xF', 
		'\x2', '\x2', 'W', 'Y', '\a', '\x11', '\x2', '\x2', 'X', 'Z', '\a', '\xF', 
		'\x2', '\x2', 'Y', 'X', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\xF', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\a', 
		'\x3', '\x2', '\x2', '\\', ']', '\a', '\t', '\x2', '\x2', ']', '_', '\a', 
		'\xE', '\x2', '\x2', '^', '`', '\x5', '\x14', '\v', '\x2', '_', '^', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x64', '\x3', '\x2', '\x2', '\x2', '\x63', '\x65', '\a', 
		'\xF', '\x2', '\x2', '\x64', '\x63', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x65', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'g', '\a', '\x3', '\x2', '\x2', 'g', 'h', '\a', '\n', '\x2', 
		'\x2', 'h', 'j', '\a', '\xE', '\x2', '\x2', 'i', 'k', '\x5', '\x16', '\f', 
		'\x2', 'j', 'i', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'j', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'o', '\x3', '\x2', '\x2', '\x2', 'n', 'p', '\a', '\xF', '\x2', 
		'\x2', 'o', 'n', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', '\x2', '\x2', 
		'\x2', 'p', '\x13', '\x3', '\x2', '\x2', '\x2', 'q', 's', '\a', '\x10', 
		'\x2', '\x2', 'r', 't', '\t', '\x2', '\x2', '\x2', 's', 'r', '\x3', '\x2', 
		'\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 't', 'v', '\x3', '\x2', 
		'\x2', '\x2', 'u', 'w', '\a', '\xF', '\x2', '\x2', 'v', 'u', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', 
		'\x2', '\x2', 'x', 'z', '\a', '\x11', '\x2', '\x2', 'y', '{', '\a', '\x13', 
		'\x2', '\x2', 'z', 'y', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', '\x2', 
		'\x2', '\x2', '{', '\x15', '\x3', '\x2', '\x2', '\x2', '|', '}', '\a', 
		'\x10', '\x2', '\x2', '}', '\x7F', '\a', '\x14', '\x2', '\x2', '~', '\x80', 
		'\a', '\xF', '\x2', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x83', '\a', '\x11', '\x2', '\x2', '\x82', '\x84', '\a', 
		'\xF', '\x2', '\x2', '\x83', '\x82', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x84', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x1B', '\"', '%', '(', '+', '.', '\x35', '>', 'G', 'P', 
		'Y', '\x61', '\x64', 'l', 'o', 's', 'v', 'z', '\x7F', '\x83',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
